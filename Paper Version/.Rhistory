names(genesInPat)[(namelength-length(tmp)+1):namelength] = i
}
else{
genesInPat = c(genesInPat,tmp)
namelength = length(genesInPat)
names(genesInPat)[namelength] = i
}
}
#get nearest genes and genes following the peaks
genesNearPat = nearestGenes(gns, patRanges)
genesFollowPat = followingGenes(gns, patRanges)
#return a list of lists with the three sets of gene information
return(list(genesWithinRegion = genesInPat, genesNearRegion = genesNearPat,
genesFollowingRegion = genesFollowPat))
}
#run the geneMatch function for every pattern
filenames = vector(mode = "list", length = length(regionPatList))
for(i in seq_along(regionPatList)) {
patgenetmp = suppressMessages(suppressWarnings(geneMatch(regionPatList[[i]],
generanges,
genome = genome)))
nam <- paste("pattern", i, "genes", sep = "")
filenames[i] = nam
assign(nam, patgenetmp)
}
library(Homo.sapiens)
genome = Homo.sapiens
#run the geneMatch function for every pattern
filenames = vector(mode = "list", length = length(regionPatList))
for(i in seq_along(regionPatList)) {
patgenetmp = suppressMessages(suppressWarnings(geneMatch(regionPatList[[i]],
generanges,
genome = genome)))
nam <- paste("pattern", i, "genes", sep = "")
filenames[i] = nam
assign(nam, patgenetmp)
}
#put all patterns into a double nested list to be returned as output
ind =paste(filenames, collapse = ",")
geneslist = eval(parse(text = paste("list(", ind, ")")))
#download pathways from msigDB
library(dplyr)
dPathways <- msigdbr::msigdbr(species = "Homo sapiens", category ="H") %>% dplyr::select(gs_name, gene_symbol) %>% as.data.frame()
ATACCoGAPS::pathwayMatch(geneslist, dPathways, p_threshold = 0.001)
lapply(regionPatList, length)
print(unlist(lapply(regionPatList, length)))
print("Peaks used for each pattern:")
print(unlist(lapply(regionPatList, length)))
numPeaks = unlist(lapply(regionPatList, length))
names(numPeaks) = lapply(seq(length(regionPatList)),
function(x) {paste("Pattern", x)})
numPeaks
print("Peaks used for each pattern:")
print(numPeaks)
print("Peaks used for each pattern:", quote = FALSE)
print(numPeaks)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
?findGOenrichment
devtools::load_all()
devtools::document()
library(ATACCoGAPS)
data("schepFilteredData")
data("schepCelltypes")
data("schepFilteredPeaks")
dim(schepFilteredData)
data("schepCogapsResult")
#colors to plot by
col <- c("salmon", 'aquamarine', 'aquamarine3', "aquamarine4", "darkorchid1", 'limegreen', "magenta", "orangered", "darkgreen", "darkred", "red3", "darkorange")
cgapsPlot(cgaps_result = schepCogapsResult, sample.classifier = schepCelltypes, cols = col, ylab = "Pattern Weight")
heatmapPatternMatrix(cgaps_result = schepCogapsResult, sample.classifier = schepCelltypes, cellCols = col)
cellClass <- patternMarkerCellClassifier(schepCogapsResult)
cellClasses <- cellClass$cellClassifier
heatmapPatternMatrix(cg99Matrix, as.factor(cellClass))
heatmapPatternMatrix(schepCogapsResult, as.factor(cellClass))
heatmapPatternMatrix(schepCogapsResult, as.factor(cellClasses))
cellClasses
x = rbind(as.factor(cellClasses), as.factor(schepCelltypes))
x[,1:10]
x = rbind(as.factor(cellClasses), schepCelltypes)
x = rbind(cellClasses, schepCelltypes)
x = rbind(cellClasses, as.character(schepCelltypes))
x[,1:10]
x[,1:200]
x[,200:400]
x = rbind(as.factor(cellClasses), as.character(schepCelltypes))
x[,1:10]
class(x[1,])
x[1,]<- as.factor(cellClasses)
x <- as.data.frame(x)
x[1,]<- as.factor(cellClasses)
x[,1:10]
x <- data.frame(cellClasses = cellClasses, cellType = schepCelltypes)
x <- data.frame(cellClasses = as.factor(cellClasses), cellType = schepCelltypes)
x[1:10,]
x[250:350,]
?order
?sort
cg99Matrix = readRDS("data/countMatrix99_result.rds")
setwd("~/Fertig Lab/ATACCoGAPS-Analysis-Code")
cg99Matrix = readRDS("data/countMatrix99_result.rds")
countMatrix99 <- readRDS("data/SchepCountMatrix99Filtered.rds")
cellTypes99 <- colnames(countMatrix99)
cellTypes99 <- plyr::mapvalues(as.factor(cellTypes99), from = c("BJ","GM","GM12878","GM12878rep2","H1ESC","HL60","K562","LMPP","PB1022"   ,"SU070","SU353","TF1"), to = c("Fibroblasts", "GMLCL 1","GMLCL 2 Rep1","GMLCL 2 Rep2","H1ESCs","HL60 Leukemia","K562 Erythroleukemia","LMPP","Monocyte","AML Patient 070","AML Patient 353","TF1 Erythroblast"))
pmcc <- ATACCoGAPS::patternMarkerCellClassifier(cg99Matrix)
pMatrix <- pmcc$predictionMatrix
cellClass <- pmcc$cellClassifier
combinedClasses <- data.frame(cellClasses = as.factor(cellClass), cellType = as.factor(cellTypes99))
combinedClasses[,1:10]
combinedClasses[1:10,]
combinedClasses[250,300,]
combinedClasses[250:300,]
sortClasses <- combinedClasses[order(combinedClasses$cellClasses),]
sortClasses[1:100,]
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col, col = viridis::magma(n=9), sort = F)
mycolors <- RColorBrewer::colorRampPalette(brewer.pal(8, "Set2"))(12)
mycolors <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set2"))(12)
col3 <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set2"))(12)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col3, col = viridis::magma(n=9), sort = FALSE)
col3 <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set1"))(12)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col3, col = viridis::magma(n=9), sort = FALSE)
col2 <- c("black", "magenta", "darkorange", "aquamarine3", "salmon",      "darkorchid1", "grey", "darkgreen")
cellClass <- plyr::mapvalues(as.factor(cellClass), from = c("0", "1", "2", "3", "4", "5", "6", "7"), to = c("Unclassified", "Pattern1", "Pattern2", "Pattern3", "Pattern4", "Pattern5", "Pattern6", "Pattern7"))
ATACCoGAPS::cgapsPlot(cg99Matrix, cellClass, col2)
ATACCoGAPS::cgapsPlot(cg99Matrix, cellClass, col2)
ATACCoGAPS::cgapsPlot(cg99Matrix, sortClasses$cellType, col3)
ATACCoGAPS::cgapsPlot(cg99Matrix, sortClasses$cellType, col3, sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, as.factor(as.character(sortClasses$cellType)), col3, sort = FALSE)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col3, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, as.factor(cellTypes99), col3, sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, as.factor(cellTypes99), col3)
?relevel
?factor
summary(as.factor(colnames(cellTypes99)))
summary(as.factor(colnames(countMatrix99)))
cfct <- factor(colnames(countMatrix99), levels = c("K562", "TF1", "GM", "GM12878", "GM12878rep2", "BJ", "H1ESC", "HL60", "LMPP", "PB1022", "SU070", "SU353"), ordered = TRUE)
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct, col3)
cfct2 <- plyr::mapvalues(as.factor(cfct), from = c("K562", "TF1", "GM", "GM12878", "GM12878rep2", "BJ", "H1ESC", "HL60", "LMPP", "PB1022", "SU070", "SU353"), to = c("K562 Erythroleukemia", "TF1 Erythroblast", "GM LCL 1","GM LCL 2 Rep1","GM LCL 2 Rep2", "BJ Fibroblasts", "H1ESCs","HL60 Leukemia", "LMPP", "PB1022 Monocyte", "AML Patient 070", "AML Patient 353",))
cfct2 <- plyr::mapvalues(as.factor(cfct), from = c("K562", "TF1", "GM", "GM12878", "GM12878rep2", "BJ", "H1ESC", "HL60", "LMPP", "PB1022", "SU070", "SU353"), to = c("K562 Erythroleukemia", "TF1 Erythroblast", "GM LCL 1","GM LCL 2 Rep1","GM LCL 2 Rep2", "BJ Fibroblasts", "H1ESCs","HL60 Leukemia", "LMPP", "PB1022 Monocyte", "AML Patient 070", "AML Patient 353"))
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct2, col3)
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct2, col)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, cellTypes99, col)
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct2, col)
ATACCoGAPS::cgapsPlot(cg99Matrix, cellTypes99, col)
combinedClasses <- data.frame(cellClasses = as.factor(cellClass), cellType = cfct2)
sortClasses <- combinedClasses[order(combinedClasses$cellClasses),]
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col, col = viridis::magma(n=9), sort = FALSE)
colors <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set3"))(nb.cols)
colors <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set3"))(12)
colors
plot(colors)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = colors, col = viridis::magma(n=9), sort = FALSE)
colors <- colorRampPalette(RColorBrewer::brewer.pal(8, "Dark2"))(12)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = colors, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = colors, col = viridis::magma(n=9), sort = FALSE)
colors <- colorRampPalette(RColorBrewer::brewer.pal(8, "Set2"))(12)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = colors, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct2, col)
col <- c("magenta", "darkorange", 'aquamarine', 'aquamarine3', "aquamarine4", "salmon", "darkorchid1", 'limegreen', "orangered", "darkgreen", "darkred", "red3", )
col <- c("magenta", "darkorange", 'aquamarine', 'aquamarine3', "aquamarine4", "salmon", "darkorchid1", 'limegreen', "orangered", "darkgreen", "darkred", "red3")
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, sortClasses$cellType, cellCols = col, col = viridis::magma(n=9), sort = FALSE)
ATACCoGAPS::cgapsPlot(cg99Matrix, cfct2, col)
col2 <- c("black", RColorBrewer::brewer.pal(7, "Dark2")
)
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, as.factor(cellClass), cellCols = col2, rowColors = rowColors, col = viridis::magma(n=9))
rowColors <- c("magenta", "darkorange", "aquamarine3", "salmon", "darkorchid1", "grey", "darkgreen")
ATACCoGAPS::heatmapPatternMatrix(cg99Matrix, as.factor(cellClass), cellCols = col2, rowColors = rowColors, col = viridis::magma(n=9))
ATACCoGAPS::cgapsPlot(cg99Matrix, cellClass, col2)
heatmapPatternMarkers(cgaps_result = schepCogapsResult, atac_data = schepFilteredData, celltypes = schepCelltypes, numregions = 50, colColors = col)
#make GRanges for subset peaks
subsetGranges <- ATACCoGAPS::peaksToGRanges(rownames(countMatrix99), sep= "-")
#get genes matched to patternMarker peaks
library(Homo.sapiens)
matchedGenes <- ATACCoGAPS::genePatternMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, genome = Homo.sapiens, scoreThreshold = 0.03)
#download pathways from msigDB
library(dplyr)
dPathways <- msigdbr::msigdbr(species = "Homo sapiens", category ="H") %>% dplyr::select(gs_name, gene_symbol) %>% as.data.frame()
#save current pathway set for reproducibility
saveRDS(dPathways, "data/msigdbrHallmarkPathways10_2019.rds")
#determine gene overlap between pathways and mathced genes
matchedPathways = ATACCoGAPS::pathwayMatch(matchedGenes, dPathways, p_threshold = 0.001)
matchedPathways
#comparing pathways found at different patternMarker score thresholds
matchedGenes0.1 <- ATACCoGAPS::genePatternMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, genome = Homo.sapiens, scoreThreshold = 0.1)
matchedPathways0.1 = ATACCoGAPS::pathwayMatch(matchedGenes, dPathways, p_threshold = 0.001)
matchedPathways0.1
matchedGenes0.3 <- ATACCoGAPS::genePatternMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, genome = Homo.sapiens, scoreThreshold = 0.3)
matchedPathways0.3 = ATACCoGAPS::pathwayMatch(matchedGenes, dPathways, p_threshold = 0.001)
matchedPathways0.3
lapply(matchedPathways, function(x){})
lapply(matchedPathways, function(x){
unlist(x)[[3]]
})
lapply(matchedPathways, function(x){
x[[3]]
})
lapply(matchedPathways0.1, function(x){x[[3]]})
lapply(matchedPathways0.3, function(x){x[[3]]})
motifTFResults <- ATACCoGAPS::simpleMotifTFMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, organism = "Homo sapiens", genome = "hg19", scoreThreshold = 0.03)
motifTFResults0.1 <- ATACCoGAPS::simpleMotifTFMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, organism = "Homo sapiens", genome = "hg19", scoreThreshold = 0.1)
motifTFResults0.3 <- ATACCoGAPS::simpleMotifTFMatch(cogapsResult = cg99Matrix, generanges = subsetGranges, organism = "Homo sapiens", genome = "hg19", scoreThreshold = 0.3)
motifTFResults$tfMatchSummary[[7]]
motifTFResults0.1$tfMatchSummary[[7]]
motifTFResults0.3$tfMatchSummary[[7]]
motifTFResults0.3$tfMatchSummary[[4]]
motifTFResults0.1$tfMatchSummary[[4]]
data("schepGranges")
#find genes known to fall within thresholded patternMarker peaks for each pattern
genes <- genePatternMatch(cogapsResult = schepCogapsResult, generanges = schepGranges, genome = Homo.sapiens, scoreThreshold = 0.05)
#download hallmark pathways using msigdbr
library(dplyr)
pathways <- msigdbr::msigdbr(species = "Homo sapiens", category =
"H") %>% dplyr::select(gs_name, gene_symbol) %>% as.data.frame()
#match these pattern Gene sets to hallmark pathways, using an adjusted p-value threshold of 0.001.
matchedPathways <- pathwayMatch(gene_list = genes, pathways = pathways, p_threshold = 0.001)
matchedPathways
GOterms <- findGOEnrichment(schepCogapsResult, schepGranges, "hg19", scoreThreshold = 0.05)
GOterms
GOterms[[4]][1:5,]
GOterms[[7]][1:5,]
motifResults = simpleMotifTFMatch(cogapsResult = schepCogapsResult, generanges = schepGranges, organism = "Homo sapiens", genome = "hg19", scoreThreshold = 0.05, motifsPerRegion = 1)
motifResults$tfMatchSummary
motifResults$tfDescriptions[[7]][which(motifResults$tfDescriptions[[7]][,2]=="IRF1"), 1]
#get peaks overlapping with the gene
IRF1peaks <- geneAccessibility("IRF1", schepGranges, schepFilteredData, Homo.sapiens)
IRF1peaks$IRF1
summary(schepCelltypes)
#make binary accessibility matrix
binaryMatrix <- (schepFilteredData > 0) + 0
#find accessibility of those peaks relative to others among monocyte cells
foldAccessibility(IRF1peaks$IRF1, schepCelltypes, "Monocyte", binaryMatrix)
#getting count matrix - peaks x cells
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroFinalSubsetData.Rdata?raw=true")
#getting GRanges for peaks
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroGRanges.Rdata?raw=true")
#getting celltypes
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroCellTypes.Rdata?raw=true")
projectRResults <- ATACTransferLearning(newData = BuenrostroFinalSubsetData, CoGAPSResult = schepCogapsResult, originalPeaks = schepFilteredPeaks, originalGranges = schepGranges,newGranges = BuenrostroGRanges)
cgapsPlot(t(projectRResults$projection), as.factor(BuenrostroCellTypes), matrix = TRUE)
pairwise.wilcox.test(projectRResults$projection[7,], BuenrostroCellTypes, p.adjust.method = "BH")
library(ATACCoGAPS)
data("schepFilteredData")
data("schepCelltypes")
data("schepFilteredPeaks")
data("schepCogapsResult")
#colors to plot by
col <- c("salmon", 'aquamarine', 'aquamarine3', "aquamarine4", "darkorchid1", 'limegreen', "magenta", "orangered", "darkgreen", "darkred", "red3", "darkorange")
#get the pattern Matrix
patMatrix <- getSampleFactors(schepCogapsResult)
data("schepGranges")
#loading TxDb of human genes
library(Homo.sapiens)
#getting count matrix - peaks x cells
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroFinalSubsetData.Rdata?raw=true")
#getting GRanges for peaks
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroGRanges.Rdata?raw=true")
#getting celltypes
repmis::source_data("https://github.com/FertigLab/ATACCoGAPS/blob/master/BuenrostroCellTypes.Rdata?raw=true")
projectRResults <- ATACTransferLearning(newData = BuenrostroFinalSubsetData, CoGAPSResult = schepCogapsResult, originalPeaks = schepFilteredPeaks, originalGranges = schepGranges,newGranges = BuenrostroGRanges)
pr <- projectRResults$projection
p7 <- pr[7,]
?boxplot
boxplot(p7 ~ as.factor(BuenrostroCellTypes))
boxplot(pr[1,] ~ as.factor(BuenrostroCellTypes))
boxplot(p7 ~ as.factor(BuenrostroCellTypes))
boxplot(p7 ~ as.factor(BuenrostroCellTypes), xlab = "Cell Type", ylab = "Pattern Weight")
boxplot(projectRResults$projection[7,] ~ as.factor(BuenrostroCellTypes), xlab = "Cell Type", ylab = "Pattern Weight")
boxplot(projectRResults$projection[7,] ~ as.factor(BuenrostroCellTypes), xlab = "Cell Type", ylab = "Pattern Weight")
lapply(matchedPathways, function(x) {x[c(1,3)]})
devtools::document()
library(CoGAPS)
devtools::install_github("FertigLab/CoGAPS")
devtools::install_github("FertigLab/CoGAPS")
library(CoGAPS)
devtools::document()
?CoGAPS::patternMarkers
data("schepCogapsResult")
threshold = "all"
lp = NA
axis = 1
!(threshold %in% c("cut", "all"))
!is.na(lp) & length(lp) != ncol(object@featureLoadings)
object = schepCogapsResult
!is.na(lp) & length(lp) != ncol(object@featureLoadings)
!(axis %in% 1:2)
## need to scale each row of the matrix of interest so that the maximum is 1
resultMatrix <- if (axis == 1) object@featureLoadings else object@sampleFactors
normedMatrix <- t(apply(resultMatrix, 1, function(row) row / max(row)))
dim(resultMatrix)
!is.na(lp)
## default pattern marker calculation, each pattern has unit weight
markerScores <- sapply(1:ncol(normedMatrix), function(patternIndex)
apply(normedMatrix, 1, function(row)
{
lp <- unitVector(patternIndex, ncol(normedMatrix))
return(sqrt(sum((row-lp)^2)))
})
)
lp <- CoGAPS::unitVector(patternIndex, ncol(normedMatrix))
unitVector <- function(n, length)
{
vec <- rep(0, length)
vec[n] <- 1
return(vec)
}
## default pattern marker calculation, each pattern has unit weight
markerScores <- sapply(1:ncol(normedMatrix), function(patternIndex)
apply(normedMatrix, 1, function(row)
{
lp <- unitVector(patternIndex, ncol(normedMatrix))
return(sqrt(sum((row-lp)^2)))
})
)
markerRanks <- apply(markerScores, 2, rank)
?rank
colnames(markerScores) <- colnames(markerRanks) <- colnames(normedMatrix)
patternsByMarker <- colnames(markerScores)[apply(markerScores, 1, which.min)]
patternsByMarker[1:5]
markersByPattern <- sapply(colnames(markerScores), USE.NAMES=TRUE, simplify=FALSE,
function(pattern) rownames(markerScores)[which(patternsByMarker==pattern)])
markersByPattern[[1]]
x=markersByPattern[[1]]
x[1:5]
1:ncol(markerRanks)
patternRank <- markerRanks[,1]
y=max(patternRank[patternRank == apply(markerRanks, 1, min)])
apply(markerRanks, 1, min)
patternRank == apply(markerRanks, 1, min)
devtools::document()
devtools::document()
atacMatrix <- readRDS("data/matchedATACMatrix.rds")
rnaMatrix <- readRDS("data/matchedRNAMatrix.rds")
atacResult <- readRDS("data/matchedATACResult.rds")
rnaResult <- readRDS("data/matchedRNAResult.rds")
setwd("~/Fertig Lab/ATACCoGAPS-Analysis-Code")
atacMatrix <- readRDS("data/matchedATACMatrix.rds")
rnaMatrix <- readRDS("data/matchedRNAMatrix.rds")
atacResult <- readRDS("data/matchedATACResult.rds")
rnaResult <- readRDS("data/matchedRNAResult.rds")
mouse = biomaRt::useMart("ensembl", dataset = "mmusculus_gene_ensembl")
rna_seq_genes = biomaRt::getBM(attributes=c("mgi_symbol", "ensembl_gene_id") , filters="ensembl_gene_id", values =rownames(rnaMatrix),mart=mouse)
nosymbol = setdiff(rownames(rnaMatrix), rna_seq_genes[,2])
rminds = c()
for(i in 1:length(nosymbol)){
ind = which(rownames(rnaMatrix) == nosymbol[i])
rminds = c(rminds, ind)
}
rnaMatrix2 = rnaMatrix
for(i in 1:nrow(rnaMatrix2)) {
ind = which(rna_seq_genes$ensembl_gene_id == rownames(rnaMatrix2)[i])
if(length(ind) == 1){
rownames(rnaMatrix2)[i] = rna_seq_genes$mgi_symbol[ind]
}
}
tbx20genes <- c("Nppa", "Nkx2-5", "Tbx2" ,"Mef2c")
tbx20RNA <- rnaMatrix2[which(rownames(rnaMatrix2) %in% tbx20genes),]
heatmap(tbx20RNA)
tbx20RNA[1,]
apply(rnaMatrix2, 1, mean)
mean(apply(rnaMatrix2, 1, mean))
apply(tbx20RNA, 1, mean)
apply(tbx20RNA, 1, median)
cg99Matrix <- readRDS("data/SchepCountMatrix99Filtered.rds")
cogapsResult99 <- GWCoGAPS(data = countMatrix99, params = params99, nThreads = 9)
cg99Matrix = readRDS("data/countMatrix99_result.rds")
col <- c("salmon", 'aquamarine', 'aquamarine3', "aquamarine4", "darkorchid1", 'limegreen', "magenta", "orangered", "darkgreen", "darkred", "red3", "darkorange")
rowColors <- c("magenta", "darkorange", "aquamarine3", "salmon", "darkorchid1", "grey", "darkgreen")
cellTypes <- plyr::mapvalues(as.factor(cellTypes), from = c("BJ","GM","GM12878","GM12878rep2","H1ESC","HL60","K562","LMPP","PB1022"   ,"SU070","SU353","TF1"), to = c("Fibroblasts", "GMLCL 1","GMLCL 2 Rep1","GMLCL 2 Rep2","H1ESCs","HL60 Leukemia","K562 Erythroleukemia","LMPP","Monocyte","AML Patient 070","AML Patient 353","TF1 Erythroblast"))
cellTypes99 <- colnames(countMatrix99)
cellTypes99 <- plyr::mapvalues(as.factor(cellTypes99), from = c("BJ","GM","GM12878","GM12878rep2","H1ESC","HL60","K562","LMPP","PB1022"   ,"SU070","SU353","TF1"), to = c("Fibroblasts", "GMLCL 1","GMLCL 2 Rep1","GMLCL 2 Rep2","H1ESCs","HL60 Leukemia","K562 Erythroleukemia","LMPP","Monocyte","AML Patient 070","AML Patient 353","TF1 Erythroblast"))
countMatrix99 <- readRDS("data/SchepCountMatrix99Filtered.rds")
cellTypes99 <- colnames(countMatrix99)
cellTypes99 <- plyr::mapvalues(as.factor(cellTypes99), from = c("BJ","GM","GM12878","GM12878rep2","H1ESC","HL60","K562","LMPP","PB1022"   ,"SU070","SU353","TF1"), to = c("Fibroblasts", "GMLCL 1","GMLCL 2 Rep1","GMLCL 2 Rep2","H1ESCs","HL60 Leukemia","K562 Erythroleukemia","LMPP","Monocyte","AML Patient 070","AML Patient 353","TF1 Erythroblast"))
ATACCoGAPS::heatmapPatternMarkers(cgaps_result = cg99Matrix, atac_data = countMatrix99, celltypes = as.factor(colnames(countMatrix99)), numregions = 50, colColors = col, rowColors = c("magenta", "darkorange", "aquamarine3", "salmon", "darkorchid1", "limegreen", "darkgreen"), col = viridis::plasma(n = 2))
library(Mus.musculus)
tbx20GA <- ATACCoGAPS::geneAccessibility(tbx20genes, atacGranges, atacMatrix, Mus.musculus)
atacGranges = ATACCoGAPS::peaksToGRanges(rownames(atacMatrix), "-")
tbx20GA <- ATACCoGAPS::geneAccessibility(tbx20genes, atacGranges, atacMatrix, Mus.musculus)
rownames(tbx20GA$Tbx2)
ATACCoGAPS::heatmapGeneAccessibility(tbx20GA$Mef2c, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
ATACCoGAPS::heatmapGeneAccessibility(tbx20GA$`Nkx2-5`, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
ATACCoGAPS::heatmapGeneAccessibility(tbx20GA$`Nkx2-5`, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
ATACCoGAPS::heatmapGeneAccessibility(tbx20GA$`Nkx2-5`, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
lapply(tbx20GA, rownames)
#'   package
#' @return A plot of the peaks overlapping with a particular gene of interest
#' @examples library(Homo.sapiens)
#' geneList <- c("TAL1", "EGR1")
#' data(schepGranges)
#' data(schepFilteredData)
#' data(schepCelltypes)
#' accessiblePeaks <- geneAccessibility(geneList = geneList, peakGranges = schepGranges, atacData = schepFilteredData, genome = Homo.sapiens)
#' heatmapGeneAccessibility(genePeaks = accessiblePeaks$TAL1, celltypes = schepCelltypes)
#' @export
heatmapGeneAccessibility <- function(genePeaks, celltypes, colColors = NULL, order = TRUE, seed = 42, ...) {
if(is.list(genePeaks)) {
stop("Only one element of the list returned by the geneAccessibility function should be input as the genePeaks parameter")
}
celltypes = as.factor(celltypes)
if(order == TRUE) {
#order the data by celltype
genePeaks = rbind(genePeaks, celltypes)
ind = nrow(genePeaks)
genePeaks = genePeaks[,order(genePeaks[ind,])]
genePeaks = genePeaks[-c(ind),]
}
if(is.null(colColors)){
#produce vectors of colors for visualizing celltypes in the heatmap
set.seed(seed)
colsgen = rainbow(length(levels(celltypes)))
colsgen = gtools::permute(colsgen)
if(order == TRUE) {
colColors = colsgen[as.numeric(sort(celltypes))]
}
else{
colColors = colsgen[as.numeric(celltypes)]
}
}
else{
if(order == TRUE) {
colColors = colColors[as.numeric(sort(celltypes))]
}
else{
colColors = colColors[as.numeric(celltypes)]
}
}
if(is.null(nrow(genePeaks))) {
warning("There is only one peak matched to this gene, adding a row of zeroes so the peak can be plotted using a heatmap.")
zeroRow <- rep(0,genePeaks)
genePeaks = rbind(genePeaks, zeroRow)
}
if(order == TRUE) {
gplots::heatmap.2(genePeaks, density.info="none", trace="none",
dendrogram='none', Rowv=FALSE, Colv=FALSE, ColSideColors = colColors,
labRow = NA, labCol = as.character(sort(celltypes)), ...)
}
else {
gplots::heatmap.2(genePeaks, density.info="none", trace="none",
dendrogram='none', Rowv=FALSE, Colv=FALSE, ColSideColors = colColors,
labRow = NA, labCol = as.character(celltypes), ...)
}
}
heatmapGeneAccessibility(tbx20GA$Nppa, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
#'   package
#' @return A plot of the peaks overlapping with a particular gene of interest
#' @examples library(Homo.sapiens)
#' geneList <- c("TAL1", "EGR1")
#' data(schepGranges)
#' data(schepFilteredData)
#' data(schepCelltypes)
#' accessiblePeaks <- geneAccessibility(geneList = geneList, peakGranges = schepGranges, atacData = schepFilteredData, genome = Homo.sapiens)
#' heatmapGeneAccessibility(genePeaks = accessiblePeaks$TAL1, celltypes = schepCelltypes)
#' @export
heatmapGeneAccessibility <- function(genePeaks, celltypes, colColors = NULL, order = TRUE, seed = 42, ...) {
if(is.list(genePeaks)) {
stop("Only one element of the list returned by the geneAccessibility function should be input as the genePeaks parameter")
}
celltypes = as.factor(celltypes)
if(order == TRUE) {
#order the data by celltype
genePeaks = rbind(genePeaks, celltypes)
ind = nrow(genePeaks)
genePeaks = genePeaks[,order(genePeaks[ind,])]
genePeaks = genePeaks[-c(ind),]
}
if(is.null(colColors)){
#produce vectors of colors for visualizing celltypes in the heatmap
set.seed(seed)
colsgen = rainbow(length(levels(celltypes)))
colsgen = gtools::permute(colsgen)
if(order == TRUE) {
colColors = colsgen[as.numeric(sort(celltypes))]
}
else{
colColors = colsgen[as.numeric(celltypes)]
}
}
else{
if(order == TRUE) {
colColors = colColors[as.numeric(sort(celltypes))]
}
else{
colColors = colColors[as.numeric(celltypes)]
}
}
if(is.null(nrow(genePeaks))) {
warning("There is only one peak matched to this gene, adding a row of zeroes so the peak can be plotted using a heatmap.")
zeroRow <- rep(0, length(genePeaks))
genePeaks = rbind(genePeaks, zeroRow)
}
if(order == TRUE) {
gplots::heatmap.2(genePeaks, density.info="none", trace="none",
dendrogram='none', Rowv=FALSE, Colv=FALSE, ColSideColors = colColors,
labRow = NA, labCol = as.character(sort(celltypes)), ...)
}
else {
gplots::heatmap.2(genePeaks, density.info="none", trace="none",
dendrogram='none', Rowv=FALSE, Colv=FALSE, ColSideColors = colColors,
labRow = NA, labCol = as.character(celltypes), ...)
}
}
heatmapGeneAccessibility(tbx20GA$Nppa, as.factor(colnames(atacMatrix)), colColors = c("darkorchid1", "blue"), col = c("white", "darkgreen"))
x= tbx20GA$Nppa
x[1:5]
lapply(tbx20GA, rownames)
atacMatrix <- readRDS("data/matchedATACMatrix.rds")
rnaMatrix <- readRDS("data/matchedRNAMatrix.rds")
